{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Stephen Powell\\\\Documents\\\\repositories\\\\practice\\\\codeWithMosh\\\\masteringReact\\\\vidly\\\\src\\\\components\\\\movies.jsx\";\nimport React, { Component } from \"react\";\nimport { getMovies } from \"../services/fakeMovieService\";\nimport MoviesTable from \"./moviesTable\";\nimport Paginate from \"./common/paginate\";\nimport { paginate } from \"../utils/paginate\";\nimport { getGenres } from \"../services/fakeGenreService\";\nimport ListGroup from \"./common/listGroup\";\nimport _ from \"lodash\";\n\nclass Movies extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      genres: [],\n      currentPage: 1,\n      pageSize: 4,\n      selectedGenre: {},\n      sortColumn: {\n        path: \"title\",\n        order: \"asc\"\n      }\n    };\n\n    this.handleDelete = movieToRemove => {\n      this.setState({\n        movies: this.state.movies.filter(movie => movie._id !== movieToRemove._id)\n      });\n    };\n\n    this.handleLike = movie => {\n      const movies = [...this.state.movies];\n      const index = movies.indexOf(movie);\n      movies[index] = { ...movies[index]\n      };\n      movies[index].liked = !movies[index].liked;\n      this.setState({\n        movies\n      });\n    };\n\n    this.handlePageChange = page => {\n      this.setState({\n        currentPage: page\n      });\n    };\n\n    this.handleGenreSelect = genre => {\n      this.setState({\n        selectedGenre: genre,\n        currentPage: 1\n      });\n    };\n\n    this.handleSort = sortColumn => {\n      this.setState({\n        sortColumn\n      });\n    };\n\n    this.getPagedData = () => {\n      const {\n        pageSize,\n        currentPage,\n        sortColumn,\n        selectedGenre,\n        movies: allMovies\n      } = this.state; //if a genre has been selected, and if the genre id is not blank, filter movies by genre. All Genres has blank id\n\n      const filtered = selectedGenre && selectedGenre._id ? allMovies.filter(m => m.genre._id === selectedGenre._id) : allMovies;\n\n      const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n\n      const movies = paginate(sorted, currentPage, pageSize);\n      return {\n        totalCount: filtered.length,\n        data: movies\n      };\n    };\n\n    this.render = () => {\n      const {\n        pageSize,\n        currentPage,\n        sortColumn,\n        selectedGenre,\n        genres\n      } = this.state;\n      const {\n        totalCount,\n        data: movies\n      } = this.getPagedData();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ListGroup, {\n        onItemSelect: this.handleGenreSelect,\n        items: genres,\n        selectedItem: selectedGenre,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }\n      }, \"Showing \", totalCount, \" movies in the database.\"), /*#__PURE__*/React.createElement(MoviesTable, {\n        movies: movies,\n        sortColumn: sortColumn,\n        onLike: this.handleLike,\n        onDelete: this.handleDelete,\n        onSort: this.handleSort,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Paginate, {\n        itemsCount: totalCount,\n        pageSize: pageSize,\n        currentPage: currentPage,\n        onPageChange: this.handlePageChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }\n      }))));\n    };\n  }\n\n  componentDidMount() {\n    const genres = [{\n      _id: \"\",\n      name: \"All Genres\"\n    }, ...getGenres()];\n    this.setState({\n      movies: getMovies(),\n      genres,\n      // single term uses deconstruction to define local varible as state varaible of the same name\n      selectedGenre: genres[0]\n    });\n  }\n\n}\n\nexport default Movies;","map":{"version":3,"sources":["C:/Users/Stephen Powell/Documents/repositories/practice/codeWithMosh/masteringReact/vidly/src/components/movies.jsx"],"names":["React","Component","getMovies","MoviesTable","Paginate","paginate","getGenres","ListGroup","_","Movies","state","movies","genres","currentPage","pageSize","selectedGenre","sortColumn","path","order","handleDelete","movieToRemove","setState","filter","movie","_id","handleLike","index","indexOf","liked","handlePageChange","page","handleGenreSelect","genre","handleSort","getPagedData","allMovies","filtered","m","sorted","orderBy","totalCount","length","data","render","componentDidMount","name"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { getMovies } from \"../services/fakeMovieService\";\r\nimport MoviesTable from \"./moviesTable\";\r\nimport Paginate from \"./common/paginate\";\r\nimport { paginate } from \"../utils/paginate\";\r\nimport { getGenres } from \"../services/fakeGenreService\";\r\nimport ListGroup from \"./common/listGroup\";\r\nimport _ from \"lodash\";\r\n\r\nclass Movies extends Component {\r\n  state = {\r\n    movies: [],\r\n    genres: [],\r\n    currentPage: 1,\r\n    pageSize: 4, \r\n    selectedGenre: {},\r\n    sortColumn: { path: \"title\", order: \"asc\" },\r\n  };\r\n\r\n  componentDidMount() {\r\n    const genres = [{ _id: \"\", name: \"All Genres\" }, ...getGenres()];\r\n    this.setState({\r\n      movies: getMovies(),\r\n      genres, // single term uses deconstruction to define local varible as state varaible of the same name\r\n      selectedGenre: genres[0],\r\n    });\r\n  }\r\n\r\n  handleDelete = (movieToRemove) => {\r\n    this.setState({\r\n      movies: this.state.movies.filter(\r\n        (movie) => movie._id !== movieToRemove._id\r\n      ),\r\n    });\r\n  };\r\n\r\n  handleLike = (movie) => {\r\n    const movies = [...this.state.movies];\r\n    const index = movies.indexOf(movie);\r\n    movies[index] = { ...movies[index] };\r\n    movies[index].liked = !movies[index].liked;\r\n    this.setState({ movies });\r\n  };\r\n\r\n  handlePageChange = (page) => {\r\n    this.setState({ currentPage: page });\r\n  };\r\n\r\n  handleGenreSelect = (genre) => {\r\n    this.setState({ selectedGenre: genre, currentPage: 1 });\r\n  };\r\n\r\n  handleSort = (sortColumn) => {\r\n    this.setState({ sortColumn });\r\n  };\r\n\r\n  getPagedData = () => {\r\n    const {\r\n      pageSize,\r\n      currentPage,\r\n      sortColumn,\r\n      selectedGenre,\r\n      movies: allMovies,\r\n    } = this.state;\r\n\r\n    //if a genre has been selected, and if the genre id is not blank, filter movies by genre. All Genres has blank id\r\n    const filtered =\r\n      selectedGenre && selectedGenre._id\r\n        ? allMovies.filter((m) => m.genre._id === selectedGenre._id)\r\n        : allMovies;\r\n\r\n    const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\r\n\r\n    const movies = paginate(sorted, currentPage, pageSize);\r\n\r\n    return {totalCount: filtered.length, data: movies};\r\n  }\r\n\r\n  render = () => {\r\n    const {\r\n      pageSize,\r\n      currentPage,\r\n      sortColumn,\r\n      selectedGenre,\r\n      genres,\r\n    } = this.state;\r\n\r\n    const {totalCount, data: movies} = this.getPagedData();\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-2\">\r\n            <ListGroup\r\n              onItemSelect={this.handleGenreSelect}\r\n              items={genres}\r\n              selectedItem={selectedGenre}\r\n            />\r\n          </div>\r\n          <div className=\"col-10\">\r\n            <p>Showing {totalCount} movies in the database.</p>\r\n            <MoviesTable\r\n              movies={movies}\r\n              sortColumn={sortColumn}\r\n              onLike={this.handleLike}\r\n              onDelete={this.handleDelete}\r\n              onSort={this.handleSort}\r\n            />\r\n            <Paginate\r\n              itemsCount={totalCount}\r\n              pageSize={pageSize}\r\n              currentPage={currentPage}\r\n              onPageChange={this.handlePageChange}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Movies;\r\n"]},"metadata":{},"sourceType":"module"}